<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="com.bbs">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 2.引入外部配置文件 -->
    <context:property-placeholder location="classpath:dbconfig.properties" system-properties-mode="NEVER"/>
    <!-- 2-1.配置阿里巴巴数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name = "url" value = "${jdbc.url}" />
        <property name = "username" value = "${jdbc.username}" />
        <property name = "password" value = "${jdbc.password}" />
        <property name = "driverClassName" value = "${jdbc.driverClassName}" />
        <property name = "filters" value = "${jdbc.filters}" />

        <!-- 最大并发连接数 -->
        <property name = "maxActive" value = "${jdbc.maxActive}" />

        <!-- 初始化连接数量 -->
        <property name = "initialSize" value = "${jdbc.initialSize}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name = "maxWait" value = "${jdbc.maxWait}" />

        <!-- 最小空闲连接数 -->
        <property name = "minIdle" value = "${jdbc.minIdle}" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name = "timeBetweenEvictionRunsMillis" value ="${jdbc.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name = "minEvictableIdleTimeMillis" value ="${jdbc.minEvictableIdleTimeMillis}" />

        <property name = "validationQuery" value = "${jdbc.validationQuery}" />
        <property name = "testWhileIdle" value = "${jdbc.testWhileIdle}" />
        <property name = "testOnBorrow" value = "${jdbc.testOnBorrow}" />
        <property name = "testOnReturn" value = "${jdbc.testOnReturn}" />
        <property name = "maxOpenPreparedStatements" value ="${jdbc.maxOpenPreparedStatements}" />

        <!-- 打开 removeAbandoned 功能 -->
        <property name = "removeAbandoned" value = "${jdbc.removeAbandoned}" />

        <!-- 1800 秒，也就是 30 分钟 -->
        <property name = "removeAbandonedTimeout" value ="${jdbc.removeAbandonedTimeout}" />

        <!-- 关闭 abanded 连接时输出错误日志 -->
        <property name = "logAbandoned" value = "${jdbc.logAbandoned}" />
    </bean>


    <!-- 4.配置spring和mybatis的整合 -->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入mybatis全局配置文件 -->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <!-- 注入dataSource -->
        <property name="dataSource" ref="dataSource" />
        <!-- 设置别名 -->
        <property name="typeAliasesPackage" value="com.bbs.core.entity" />
        <!-- 注入mybatis映射文件 -->
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml" />
    </bean>
    <!-- 4-1.配置扫描器,将mybatis接口的实现加入到ioc容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描所有dao层的实现,并加入到ioc容器中 -->
        <property name="basePackage" value="com.bbs.core.dao" />
    </bean>


    <!-- 5.事务控制器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 控制数据库 -->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 5-1.aop处理 -->
    <aop:config proxy-target-class="true">
        <!--切入表达式-->
        <aop:pointcut id="txPoint" expression="execution(* *..service*..*(..))" />
        <!-- 配置事务增强 -->
        <aop:advisor pointcut-ref="txPoint" advice-ref="txAdvice" />
    </aop:config>

    <!-- 5-2.事务的支持 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 所有方法都是事务 -->
            <tx:method name="*" rollback-for="Exception"/>
            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>


    <!-- 6.导入组件 -->
    <import resource="spring-security.xml" />

</beans>